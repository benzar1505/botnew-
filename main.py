import logging
import os
from aiogram import Bot, Dispatcher, types, Router, F
from aiogram.enums import ParseMode
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import Command
from keep_alive import keep_alive  # –î–ª—è –ø—ñ–¥—Ç—Ä–∏–º–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ Heroku
import asyncio
import signal

# –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–æ–∫–µ–Ω–∞
API_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
if not API_TOKEN:
    raise ValueError("‚ùå API_TOKEN –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ! –î–æ–¥–∞–π—Ç–µ —Ç–æ–∫–µ–Ω —É –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞.")

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO)

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞ —Ç–∞ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=API_TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher()

# –°—Ç–≤–æ—Ä—é—î–º–æ Router
router = Router()

# –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é
main_menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üìã –ü–æ—Å–ª—É–≥–∏"), KeyboardButton(text="‚úçÔ∏è –ó–∞–ª–∏—à–∏—Ç–∏ –∑–∞—è–≤–∫—É")],
        [KeyboardButton(text="üìû –ö–æ–Ω—Ç–∞–∫—Ç–∏"), KeyboardButton(text="‚ùì –î–æ–ø–æ–º–æ–≥–∞")],
    ],
    resize_keyboard=True
)

# –ü—ñ–¥–º–µ–Ω—é –ø–æ—Å–ª—É–≥
services_menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üöó –†–∞–∑–æ–≤–∏–π –æ–≥–ª—è–¥ –∞–≤—Ç–æ")],
        [KeyboardButton(text="üéØ –ï–∫—Å–ø–µ—Ä—Ç –Ω–∞ –¥–µ–Ω—å")],
        [KeyboardButton(text="üè™ –°—É–ø—Ä–æ–≤—ñ–¥ –Ω–∞ –∞–≤—Ç–æ—Ä–∏–Ω–∫—É")],
        [KeyboardButton(text="üîë –ü—ñ–¥–±—ñ—Ä –∞–≤—Ç–æ '–ü—ñ–¥ –∫–ª—é—á'")],
        [KeyboardButton(text="üîô –ù–∞–∑–∞–¥")],
    ],
    resize_keyboard=True
)

# –ö–æ–º–∞–Ω–¥–∞ /start
@router.message(Command("start"))
async def send_welcome(message: types.Message):
    await message.answer(
        "üöó –ü—Ä–∏–≤—ñ—Ç! –Ø –±–æ—Ç —Å–µ—Ä–≤—ñ—Å—É <b>AutoScout Kyiv</b>. –Ø –¥–æ–ø–æ–º–æ–∂—É –≤–∞–º –∑–Ω–∞–π—Ç–∏ —ñ–¥–µ–∞–ª—å–Ω–µ –∞–≤—Ç–æ! \n\n"
        "–û–±–µ—Ä—ñ—Ç—å –∫–æ–º–∞–Ω–¥—É –≤ –º–µ–Ω—é –∞–±–æ –Ω–∞–ø–∏—à—ñ—Ç—å '–î–æ–ø–æ–º–æ–≥–∞' –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –≤—Å—ñ—Ö –º–æ–∂–ª–∏–≤–æ—Å—Ç–µ–π.",
        reply_markup=main_menu
    )

# –í—ñ–¥–∫—Ä–∏—Ç—Ç—è –ø—ñ–¥–º–µ–Ω—é –ø–æ—Å–ª—É–≥
@router.message(F.text == "üìã –ü–æ—Å–ª—É–≥–∏")
async def show_services_menu(message: types.Message):
    await message.answer("üõ† –û–±–µ—Ä—ñ—Ç—å –ø–æ—Å–ª—É–≥—É:", reply_markup=services_menu)

# –ù–∞–∑–∞–¥ –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
@router.message(F.text == "üîô –ù–∞–∑–∞–¥")
async def go_back(message: types.Message):
    await message.answer("üîô –í–∏ –ø–æ–≤–µ—Ä–Ω—É–ª–∏—Å—å —É –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é.", reply_markup=main_menu)

# –†–µ–∞–ª—ñ–∑–∞—Ü—ñ—è –ø–æ—Å–ª—É–≥
@router.message(F.text == "üöó –†–∞–∑–æ–≤–∏–π –æ–≥–ª—è–¥ –∞–≤—Ç–æ")
async def service_one_time_check(message: types.Message):
    await message.answer("üöó <b>–†–ê–ó–û–í–ò–ô –û–ì–õ–Ø–î –ê–í–¢–û ‚Äì 1500‚Ç¥</b>\n\n...")

@router.message(F.text == "üéØ –ï–∫—Å–ø–µ—Ä—Ç –Ω–∞ –¥–µ–Ω—å")
async def service_expert_day(message: types.Message):
    await message.answer("üéØ <b>–ï–ö–°–ü–ï–†–¢ –ù–ê –î–ï–ù–¨ ‚Äì 4000‚Ç¥</b>\n\n...")

# –ü—ñ–¥–∫–ª—é—á–∞—î–º–æ Router –¥–æ Dispatcher
dp.include_router(router)

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–±—Ä–æ–±–∫–∏ —Å–∏–≥–Ω–∞–ª—É –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è
def handle_exit(*args):
    logging.warning("–ë–æ—Ç –≤–∏–º–∏–∫–∞—î—Ç—å—Å—è...")
    asyncio.create_task(bot.session.close())
    asyncio.sleep(5)
    logging.warning("–ë–æ—Ç –≤–∏–º–∫–Ω–µ–Ω–æ.")

# –§—É–Ω–∫—Ü—ñ—è –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞
async def main():
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)

if __name__ == "__main__":
    keep_alive()  # –ü—ñ–¥—Ç—Ä–∏–º–∫–∞ —Ä–æ–±–æ—Ç–∏ –Ω–∞ Heroku
    signal.signal(signal.SIGTERM, handle_exit)  # –î–æ–¥–∞–Ω–æ –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è
    asyncio.run(main())