import logging
import asyncio
import os
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ParseMode
from aiogram.filters import Command
from aiohttp import web

# –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–æ–∫–µ–Ω–∞
API_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
if not API_TOKEN:
    raise ValueError("‚ùå API_TOKEN –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ! –î–æ–¥–∞–π—Ç–µ —Ç–æ–∫–µ–Ω —É –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞.")

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO)

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞ —Ç–∞ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=API_TOKEN)
dp = Dispatcher()

# –°—Ç–≤–æ—Ä—é—î–º–æ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é
main_menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üìã –ü–æ—Å–ª—É–≥–∏"), KeyboardButton(text="‚úçÔ∏è –ó–∞–ø–æ–≤–Ω–∏—Ç–∏ –∑–∞—è–≤–∫—É")],
        [KeyboardButton(text="üìû –ö–æ–Ω—Ç–∞–∫—Ç–∏"), KeyboardButton(text="‚ùì –î–æ–ø–æ–º–æ–≥–∞")],
    ],
    resize_keyboard=True
)

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message_handler(Command("start"))
async def send_welcome(message: types.Message):
    await message.answer(
        "üöó –ü—Ä–∏–≤—ñ—Ç! –Ø –±–æ—Ç —Å–µ—Ä–≤—ñ—Å—É <b>AutoScout Kyiv</b>. –Ø –¥–æ–ø–æ–º–æ–∂—É –≤–∞–º –∑–Ω–∞–π—Ç–∏ —ñ–¥–µ–∞–ª—å–Ω–µ –∞–≤—Ç–æ! \n\n"
        "–û–±–µ—Ä—ñ—Ç—å –∫–æ–º–∞–Ω–¥—É –≤ –º–µ–Ω—é –∞–±–æ –Ω–∞–ø–∏—à—ñ—Ç—å '–î–æ–ø–æ–º–æ–≥–∞' –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –≤—Å—ñ—Ö –º–æ–∂–ª–∏–≤–æ—Å—Ç–µ–π.",
        reply_markup=main_menu,
        parse_mode=ParseMode.HTML
    )

# –ü–æ—Å–ª—É–≥–∏
@dp.message_handler(lambda message: message.text == "üìã –ü–æ—Å–ª—É–≥–∏")
async def show_services(message: types.Message):
    await message.answer(
        "üõ† <b>–ù–∞—à—ñ –ø–æ—Å–ª—É–≥–∏:</b>\n\n"
        "üîπ –†–∞–∑–æ–≤–∏–π –æ–≥–ª—è–¥ –∞–≤—Ç–æ\n"
        "üîπ –ü—ñ–¥–±—ñ—Ä –∞–≤—Ç–æ '–ø—ñ–¥ –∫–ª—é—á'\n"
        "üîπ –ï–∫—Å–ø–µ—Ä—Ç –Ω–∞ –¥–µ–Ω—å\n"
        "üîπ –°—É–ø—Ä–æ–≤—ñ–¥ –Ω–∞ –∞–≤—Ç–æ—Ä–∏–Ω–∫—É\n"
        "üîπ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤\n"
        "üîπ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –°–¢–û\n"
        "üîπ –§–æ—Ç–æ/–≤—ñ–¥–µ–æ –∑–≤—ñ—Ç",
        parse_mode=ParseMode.HTML
    )

# –ö–æ–Ω—Ç–∞–∫—Ç–∏
@dp.message_handler(lambda message: message.text == "üìû –ö–æ–Ω—Ç–∞–∫—Ç–∏")
async def send_contacts(message: types.Message):
    await message.answer(
        "üìû <b>–ö–æ–Ω—Ç–∞–∫—Ç–∏:</b>\n"
        "üì≤ –¢–µ–ª–µ—Ñ–æ–Ω: +380 (73) 933 77 97\n"
        "üìç –ö–∏—ó–≤\n\n"
        "üîπ <a href='https://t.me/autoscout_kyiv'>Telegram</a>\n"
        "üîπ <a href='https://instagram.com/autoscout_kyiv'>Instagram</a>\n"
        "üîπ <a href='https://autoscout.neocities.org/'>–ù–∞—à —Å–∞–π—Ç</a>",
        parse_mode=ParseMode.HTML
    )

# –î–æ–ø–æ–º–æ–≥–∞
@dp.message_handler(lambda message: message.text == "‚ùì –î–æ–ø–æ–º–æ–≥–∞")
async def send_help(message: types.Message):
    await message.answer(
        "‚ùì <b>–î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:</b>\n"
        "üìã –ü–æ—Å–ª—É–≥–∏ ‚Äî –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –Ω–∞—à—ñ –ø–æ—Å–ª—É–≥–∏\n"
        "‚úçÔ∏è –ó–∞–ø–æ–≤–Ω–∏—Ç–∏ –∑–∞—è–≤–∫—É ‚Äî —è–∫ –∑—Ä–æ–±–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è\n"
        "üìû –ö–æ–Ω—Ç–∞–∫—Ç–∏ ‚Äî —Ç–µ–ª–µ—Ñ–æ–Ω, Telegram, Instagram, —Å–∞–π—Ç\n"
        "–Ø–∫—â–æ —É –≤–∞—Å —î –ø–∏—Ç–∞–Ω–Ω—è, –∑–≤–µ—Ä—Ç–∞–π—Ç–µ—Å—è!",
        parse_mode=ParseMode.HTML
    )

# –û–±—Ä–æ–±–∫–∞ webhook
async def handle_webhook(request):
    update = await request.json()
    await dp.feed_update(bot, update)
    return web.Response(text="OK")

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞
async def on_startup(app):
    webhook_url = f"https://{os.getenv('HEROKU_APP_NAME')}.herokuapp.com/"
    await bot.set_webhook(webhook_url)

app = web.Application()
app.router.add_post("/", handle_webhook)
app.on_startup.append(on_startup)

# –ó–∞–ø—É—Å–∫
if __name__ == "__main__":
    port = int(os.environ.get("PORT", 5000))
    web.run_app(app, host="0.0.0.0", port=port)
