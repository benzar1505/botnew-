import logging
import asyncio
import os
from aiogram import Bot, Dispatcher, types, Router, F
from aiogram.enums import ParseMode
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

# –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–æ–∫–µ–Ω–∞
API_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
if not API_TOKEN:
    raise ValueError("‚ùå API_TOKEN –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ! –î–æ–¥–∞–π—Ç–µ —Ç–æ–∫–µ–Ω —É –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞.")

# ID –∞–¥–º—ñ–Ω–∞
ADMIN_ID = 7858563425  

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO)

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞ —Ç–∞ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=API_TOKEN)
dp = Dispatcher()
router = Router()

# –°—Ç–≤–æ—Ä—é—î–º–æ –º–µ–Ω—é
main_menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üìã –ü–æ—Å–ª—É–≥–∏"), KeyboardButton(text="üìù –ó–∞–ø–æ–≤–Ω–∏—Ç–∏ –∑–∞—è–≤–∫—É")],
        [KeyboardButton(text="üìû –ö–æ–Ω—Ç–∞–∫—Ç–∏"), KeyboardButton(text="‚ùì –î–æ–ø–æ–º–æ–≥–∞")],
    ],
    resize_keyboard=True
)

# –°—Ç–∞–Ω –¥–ª—è –∑–∞—è–≤–∫–∏
class RequestForm(StatesGroup):
    name = State()
    contact = State()
    service = State()
    question = State()

# –ö–æ–º–∞–Ω–¥–∞ /start
@router.message(Command("start"))
async def send_welcome(message: types.Message):
    await message.answer(
        "üöó –ü—Ä–∏–≤—ñ—Ç! –Ø –±–æ—Ç —Å–µ—Ä–≤—ñ—Å—É <b>AutoScout Kyiv</b>. –Ø –¥–æ–ø–æ–º–æ–∂—É –≤–∞–º –∑–Ω–∞–π—Ç–∏ —ñ–¥–µ–∞–ª—å–Ω–µ –∞–≤—Ç–æ!\n\n"
        "–û–±–µ—Ä—ñ—Ç—å –∫–æ–º–∞–Ω–¥—É –≤ –º–µ–Ω—é –∞–±–æ –Ω–∞–ø–∏—à—ñ—Ç—å '–î–æ–ø–æ–º–æ–≥–∞' –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –≤—Å—ñ—Ö –º–æ–∂–ª–∏–≤–æ—Å—Ç–µ–π.",
        reply_markup=main_menu,
        parse_mode=ParseMode.HTML
    )

# –ü–æ—Å–ª—É–≥–∏
@router.message(F.text == "üìã –ü–æ—Å–ª—É–≥–∏")
async def show_services(message: types.Message):
    await message.answer(
        "üõ† <b>–ù–∞—à—ñ –ø–æ—Å–ª—É–≥–∏:</b>\n\n"
        "üîπ –†–∞–∑–æ–≤–∏–π –æ–≥–ª—è–¥ –∞–≤—Ç–æ\n"
        "üîπ –ü—ñ–¥–±—ñ—Ä –∞–≤—Ç–æ '–ø—ñ–¥ –∫–ª—é—á'\n"
        "üîπ –ï–∫—Å–ø–µ—Ä—Ç –Ω–∞ –¥–µ–Ω—å\n"
        "üîπ –°—É–ø—Ä–æ–≤—ñ–¥ –Ω–∞ –∞–≤—Ç–æ—Ä–∏–Ω–∫—É\n"
        "üîπ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤\n"
        "üîπ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –°–¢–û\n"
        "üîπ –§–æ—Ç–æ/–≤—ñ–¥–µ–æ –∑–≤—ñ—Ç",
        parse_mode=ParseMode.HTML
    )

# –ö–æ–Ω—Ç–∞–∫—Ç–∏
@router.message(F.text == "üìû –ö–æ–Ω—Ç–∞–∫—Ç–∏")
async def send_contacts(message: types.Message):
    await message.answer(
        "üìû <b>–ö–æ–Ω—Ç–∞–∫—Ç–∏:</b>\n"
        "üì≤ –¢–µ–ª–µ—Ñ–æ–Ω: +380 (73) 933 77 97\n"
        "üìç –ö–∏—ó–≤\n\n"
        "üîπ <a href='https://t.me/autoscout_kyiv'>Telegram</a>\n"
        "üîπ <a href='https://instagram.com/autoscout_kyiv'>Instagram</a>\n"
        "üîπ <a href='https://autoscout.neocities.org/'>–ù–∞—à —Å–∞–π—Ç</a>",
        parse_mode=ParseMode.HTML
    )

# –î–æ–ø–æ–º–æ–≥–∞
@router.message(F.text == "‚ùì –î–æ–ø–æ–º–æ–≥–∞")
async def send_help(message: types.Message):
    await message.answer(
        "‚ùì <b>–î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:</b>\n"
        "üìã –ü–æ—Å–ª—É–≥–∏ ‚Äî –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –Ω–∞—à—ñ –ø–æ—Å–ª—É–≥–∏\n"
        "üìù –ó–∞–ø–æ–≤–Ω–∏—Ç–∏ –∑–∞—è–≤–∫—É ‚Äî –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –∑–∞—è–≤–∫—É –Ω–∞ –ø—ñ–¥–±—ñ—Ä –∞–≤—Ç–æ\n"
        "üìû –ö–æ–Ω—Ç–∞–∫—Ç–∏ ‚Äî —Ç–µ–ª–µ—Ñ–æ–Ω, Telegram, Instagram, —Å–∞–π—Ç\n"
        "–Ø–∫—â–æ —É –≤–∞—Å —î –ø–∏—Ç–∞–Ω–Ω—è, –∑–≤–µ—Ä—Ç–∞–π—Ç–µ—Å—è!",
        parse_mode=ParseMode.HTML
    )

# --- –§–æ—Ä–º–∞ –∑–∞—è–≤–∫–∏ ---
@router.message(F.text == "üìù –ó–∞–ø–æ–≤–Ω–∏—Ç–∏ –∑–∞—è–≤–∫—É")
async def request_start(message: types.Message, state: FSMContext):
    await state.set_state(RequestForm.name)
    await message.answer("üìù –í–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ —ñ–º'—è:")

@router.message(RequestForm.name)
async def request_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    await state.set_state(RequestForm.contact)
    await message.answer("üìû –í–≤–µ–¥—ñ—Ç—å –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –∞–±–æ Telegram-–Ω—ñ–∫:")

@router.message(RequestForm.contact)
async def request_contact(message: types.Message, state: FSMContext):
    await state.update_data(contact=message.text)
    await state.set_state(RequestForm.service)
    await message.answer("üîπ –û–±–µ—Ä—ñ—Ç—å –ø–æ—Å–ª—É–≥—É:\n\n"
                         "1Ô∏è‚É£ –†–∞–∑–æ–≤–∏–π –æ–≥–ª—è–¥ –∞–≤—Ç–æ\n"
                         "2Ô∏è‚É£ –ü—ñ–¥–±—ñ—Ä –∞–≤—Ç–æ '–ø—ñ–¥ –∫–ª—é—á'\n"
                         "3Ô∏è‚É£ –ï–∫—Å–ø–µ—Ä—Ç –Ω–∞ –¥–µ–Ω—å\n"
                         "4Ô∏è‚É£ –°—É–ø—Ä–æ–≤—ñ–¥ –Ω–∞ –∞–≤—Ç–æ—Ä–∏–Ω–∫—É\n"
                         "5Ô∏è‚É£ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤\n"
                         "6Ô∏è‚É£ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –°–¢–û\n"
                         "7Ô∏è‚É£ –§–æ—Ç–æ/–≤—ñ–¥–µ–æ –∑–≤—ñ—Ç\n\n"
                         "–ù–∞–ø–∏—à—ñ—Ç—å –Ω–æ–º–µ—Ä –∞–±–æ –Ω–∞–∑–≤—É –ø–æ—Å–ª—É–≥–∏.")

@router.message(RequestForm.service)
async def request_service(message: types.Message, state: FSMContext):
    await state.update_data(service=message.text)
    await state.set_state(RequestForm.question)
    await message.answer("‚ùì –í–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ –ø–∏—Ç–∞–Ω–Ω—è –∞–±–æ —É—Ç–æ—á–Ω–µ–Ω–Ω—è:")

@router.message(RequestForm.question)
async def request_question(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    
    # –§–æ—Ä–º—É—î–º–æ —Ç–µ–∫—Å—Ç –∑–∞—è–≤–∫–∏
    request_text = (
        f"üì© <b>–ù–æ–≤–∞ –∑–∞—è–≤–∫–∞:</b>\n\n"
        f"üë§ –Ü–º'—è: {user_data['name']}\n"
        f"üìû –ö–æ–Ω—Ç–∞–∫—Ç: {user_data['contact']}\n"
        f"üîπ –ü–æ—Å–ª—É–≥–∞: {user_data['service']}\n"
        f"‚ùì –ü–∏—Ç–∞–Ω–Ω—è: {message.text}"
    )
    
    # –ù–∞–¥—Å–∏–ª–∞—î–º–æ –∞–¥–º—ñ–Ω—É
    await bot.send_message(ADMIN_ID, request_text, parse_mode=ParseMode.HTML)
    
    # –î—è–∫—É—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
    await message.answer("‚úÖ –î—è–∫—É—î–º–æ! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–∞, –º–∏ –∑–≤'—è–∂–µ–º–æ—Å—è –∑ –≤–∞–º–∏ –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º.")
    
    await state.clear()

# –ü—ñ–¥–∫–ª—é—á–∞—î–º–æ Router –¥–æ Dispatcher
dp.include_router(router)

# –§—É–Ω–∫—Ü—ñ—è –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞
async def main():
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    asyncio.run(main())